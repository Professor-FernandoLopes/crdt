{"version":3,"sources":["NavBar/MenuItems.js","assets/img/logo.png","NavBar/NavBar.js","constants/chains.js","constants/coins.js","ethereumFunctions.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","Components/LoadingButton.js","Components/wrongNetwork.js","CoinSwapper/CoinSwapper.js","Liquidity/SwitchButton.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/Liquidity.js","assets/img/logo.svg","Components/connectWalletPage.js","App.js","reportWebVitals.js","index.js"],"names":["MenuItems","title","url","cName","NavBar","state","clicked","className","src","logo","map","item","index","to","Component","networks","ChainId","routerAddress","Map","set","COINS","chains","name","abbr","address","ROUTER","require","ERC20","FACTORY","PAIR","getProvider","ethers","providers","Web3Provider","window","ethereum","getSigner","provider","getNetwork","a","network","chainId","getRouter","signer","Contract","abi","getWeth","getFactory","getAccount","request","method","accounts","getDecimals","token","decimals","then","result","catch","error","console","log","getBalanceAndSymbol","accountAddress","weth_address","coins","getBalance","balanceRaw","balance","utils","formatEther","symbol","tokenDecimals","balanceOf","address1","address2","amount","routerContract","tokens","time","Math","floor","Date","now","deadline","BigNumber","from","token1","amountIn","parseUnits","callStatic","getAmountsOut","amountOut","approve","WETH","wethAddress","swapExactETHForTokens","value","swapExactTokensForETH","swapExactTokensForTokens","token1Decimals","token2","token2Decimals","String","values_out","amount_out","Number","fetchReserves","pair","coin1","coin2","coin1Decimals","coin2Decimals","getReserves","reservesRaw","token0","results","factory","getPair","pairAddress","liquidityTokens_BN","liquidityTokens","toPrecision","useStyles","makeStyles","theme","container","padding","spacing","minHeight","backgroundColor","COLORS","borderRadius","borderColor","borderWidth","borderStyle","container_input","marginLeft","textAlign","container_blank","grid","height","fab","zIndex","input","typography","h5","width","inputBase","RemoveLiquidityField1","props","classes","onClick","onChange","activeField","Grid","direction","justifyContent","alignItems","xs","Fab","size","variant","InputBase","placeholder","disabled","root","RemoveLiquidityField2","CoinField","button","paddingTop","paddingBottom","coinName","opacity","CoinButton","coinAbbr","ButtonBase","focusRipple","Typography","styles","dialogContainer","titleSection","titleText","alignSelf","hr","margin","paddingLeft","paddingRight","coinList","overflowY","coinContainer","marginTop","overflow","DialogTitle","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","DialogActions","MuiDialogActions","CoinDialog","open","React","useState","setAddress","setError","exit","Dialog","undefined","fullWidth","maxWidth","paper","TextField","e","target","helperText","coin","Button","autoFocus","err","doesTokenExist","color","wrapper","position","progress","green","top","left","LoadingButton","loading","valid","success","fail","type","CircularProgress","WrongNetwork","paperContainer","switchButton","marginBottom","footer","CoinSwapper","enqueueSnackbar","useSnackbar","account","setAccount","setChainId","router","setRouter","weth","setWeth","setFactory","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","wrongNetworkOpen","setwrongNetworkOpen","setCoin1","setCoin2","setCoins","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","formatReserve","reserve","useEffect","data","isNaN","getAmountOut","toFixed","coinTimeout","setTimeout","clearTimeout","includes","get","factory_address","Network","Container","Paper","fontSize","parsedInput1","parsedInput2","isButtonEnabled","swapTokens","message","autoHideDuration","SwitchButton","setDeploy","changeStyles","K","document","getElementById","style","ButtonGroup","id","text","amount1","amount2","amount1min","amount2min","amountIn1","amountIn2","amount1Min","amount2Min","addLiquidityETH","addLiquidity","liquidity_tokens","liquidity","Getliquidity","removeLiquidityETH","removeLiquidity","quote","reserve1","reserve2","quoteMintLiquidity","amountA","amountB","MINIMUM_LIQUIDITY","_reserveA","_reserveB","totalSupply","reserveA","reserveB","_totalSupply","valueA","valueB","sqrt","min","amountADesired","amountBDesired","amountBOptimal","amountAOptimal","feeTo","feeOn","kLast","_kLast","feeLiquidity","Aout","Bout","background","values","buttonIcon","marginRight","LiquidityDeployer","setLiquidityTokens","liquidityOut","setLiquidityOut","oldField1Value","oldField2Value","field2","NaN","quoteAddLiquidity","LiquidityRemover","tokensOut","setTokensOut","parsedInput","quoteRemoveLiquidity","Liquidity","deploy","deploy_or_remove","ConnectWalletPage","href","createTheme","palette","primary","main","contrastText","secondary","App","maxSnack","ThemeProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5e3aa4d6.chunk.js","sourcesContent":["export const MenuItems = [\r\n  {\r\n    title: \"Swap\",\r\n    url: \"/crdt-swap/\",\r\n    cName: \"nav-links\",\r\n  },\r\n  {\r\n    title: \"Liquidity\",\r\n    url: \"/crdt-liquidity/\",\r\n    cName: \"nav-links\",\r\n  },\r\n];\r\n","export default __webpack_public_path__ + \"static/media/logo.e09b7921.png\";","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { MenuItems } from \"./MenuItems\";\r\nimport logo from \"../assets/img/logo.png\";\r\nimport \"./NavBar.css\";\r\n\r\nclass NavBar extends Component {\r\n  state = { clicked: false };\r\n\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <div className=\"Title\">\r\n          <h1 className=\"navbar-logo\">\r\n            <img src={logo} className=\"logo\"></img>  \r\n          </h1>\r\n        </div>\r\n\r\n        <div className=\"NavbarItems\">\r\n          <ul className={`nav-menu`}>\r\n            {MenuItems.map((item, index) => {\r\n              return (\r\n                <li key={index}>\r\n                  <Link className={\"nav-links\"} to={item.url}>\r\n                    {item.title}\r\n                  </Link>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","export const networks = [1,3,4,5,42,123,444800, 444900,56]\r\n\r\nexport const ChainId = {\r\n  MAINNET: 1,\r\n  ROPSTEN: 3,\r\n  RINKEBY: 4,\r\n  GÖRLI: 5,\r\n  KOVAN: 42,\r\n  DEVNET: 444800,\r\n  AUTONITY: 444900,\r\n  PARASTATE: 123,\r\n  BSC: 56\r\n};\r\n\r\nexport const routerAddress = new Map();\r\nrouterAddress.set(ChainId.MAINNET, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\r\nrouterAddress.set(ChainId.ROPSTEN, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\r\nrouterAddress.set(ChainId.RINKEBY, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\r\nrouterAddress.set(ChainId.GÖRLI, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\r\nrouterAddress.set(ChainId.KOVAN, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\r\nrouterAddress.set(ChainId.DEVNET, \"0x04e555283D37aE85F6eB311fe2578F3B3f3dFc52\");\r\nrouterAddress.set(ChainId.AUTONITY, \"0x04e555283D37aE85F6eB311fe2578F3B3f3dFc52\");\r\nrouterAddress.set(ChainId.PARASTATE, \"0x07a1905D44feeA439ceFAabd11a63bEf684abE11\");\r\nrouterAddress.set(ChainId.BSC, \"0x10ED43C718714eb63d5aA57B78B54704E256024E\");\r\n","import * as chains from './chains';\r\n\r\n// If you add coins for a new network, make sure Weth address (for the router you are using) is the first entry\r\n\r\nconst AUTONITYCoins = [\r\n  {\r\n    name: \"Auton\",\r\n    abbr: \"AUT\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Newton\",\r\n    abbr: \"NEW\",\r\n    address: \"0xBd770416a3345F91E4B34576cb804a576fa48EB1\",\r\n  },\r\n  {\r\n    name: \"Token A\",\r\n    abbr: \"TA\",\r\n    address: \"0xD5073808CbA7d24500aa8f659B339b87945958a6\",\r\n  },\r\n  {\r\n    name: \"Token B\",\r\n    abbr: \"TB\",\r\n    address: \"0x908B8e60d149529d757F4aEd9320F246724f2b99\",\r\n  },\r\n  {\r\n    name: \"Token C\",\r\n    abbr: \"TC\",\r\n    address: \"0x03c7D835CceE5d741b3f3D144eBfC5327925ECf9\",\r\n  },\r\n  {\r\n    name: \"Token D\",\r\n    abbr: \"TD\",\r\n    address: \"0x90636A8bb3AD4C2168EE20CF5E6183D827Da2E91\",\r\n  }\r\n]\r\n\r\nconst DEVNETCoins = [\r\n  {\r\n    name: \"Auton\",\r\n    abbr: \"AUT\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Newton\",\r\n    abbr: \"NEW\",\r\n    address: \"0xBd770416a3345F91E4B34576cb804a576fa48EB1\",\r\n  },\r\n  {\r\n    name: \"Token A\",\r\n    abbr: \"TA\",\r\n    address: \"0xD5073808CbA7d24500aa8f659B339b87945958a6\",\r\n  },\r\n  {\r\n    name: \"Token B\",\r\n    abbr: \"TB\",\r\n    address: \"0x908B8e60d149529d757F4aEd9320F246724f2b99\",\r\n  }\r\n]\r\n\r\nconst PARASTATECoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Token A\",\r\n    abbr: \"TA\",\r\n    address: \"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\",\r\n  },\r\n  {\r\n    name: \"Token B\",\r\n    abbr: \"TB\",\r\n    address: \"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\",\r\n  },\r\n  \r\n  {\r\n    name: \"Token C\",\r\n    abbr: \"TC\",\r\n    address: \"0x1d29BD2ACedBff15A59e946a4DE26d5257447727\",\r\n  },\r\n  {\r\n    name: \"Token D\",\r\n    abbr: \"TD\",\r\n    address: \"0xc108a13D00371520EbBeCc7DF5C8610C71F4FfbA\",\r\n  }\r\n]\r\n\r\nconst MAINNETCoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"DAI\",\r\n    address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\r\n  },\r\n]\r\n\r\nconst ROPSTENCoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"DAI\",\r\n    address: \"0xad6d458402f60fd3bd25163575031acdce07538d\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0x6ee856ae55b6e1a249f04cd3b947141bc146273c\",\r\n  },\r\n  \r\n]\r\n\r\nconst KOVANCoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"DAI\",\r\n    address: \"0xc4375b7de8af5a38a93548eb8453a498222c4ff2\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0xf3e0d7bf58c5d455d31ef1c2d5375904df525105\",\r\n  },\r\n]\r\n\r\nconst RINKEBYCoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"DAI\",\r\n    address: \"0x95b58a6bff3d14b7db2f5cb5f0ad413dc2940658\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0x3b00ef435fa4fcff5c209a37d1f3dcff37c705ad\",\r\n  },\r\n]\r\n\r\nconst GÖRLICoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"DAI\",\r\n    address: \"0x73967c6a0904aa032c103b4104747e88c566b1a2\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0x509ee0d083ddf8ac028f2a56731412edd63223b9\",\r\n  },\r\n]\r\n\r\nconst BSCcoins = [\r\n  {\r\n    name: \"Wrapped BNB\",\r\n    abbr: \"WBNB\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Binance-Peg BUSD Token\",\r\n    abbr: \"BUSd\",\r\n    address: \"0xe9e7cea3dedca5984780bafc599bd69add087d56\",\r\n  },\r\n  {\r\n    name: \"Crypto Daily Token USD\",\r\n    abbr: \"BSCRDT\",\r\n    address: \"0xc418AAfA34fa29d8CaC3018C63A8628F0724d701\",\r\n  },\r\n]\r\n\r\nconst COINS = new Map();\r\nCOINS.set(chains.ChainId.MAINNET, MAINNETCoins);\r\nCOINS.set(chains.ChainId.ROPSTEN, ROPSTENCoins);\r\nCOINS.set(chains.ChainId.RINKEBY, RINKEBYCoins);\r\nCOINS.set(chains.ChainId.GÖRLI, GÖRLICoins);\r\nCOINS.set(chains.ChainId.KOVAN, KOVANCoins);\r\nCOINS.set(chains.ChainId.AUTONITY, AUTONITYCoins);\r\nCOINS.set(chains.ChainId.DEVNET, DEVNETCoins);\r\nCOINS.set(chains.ChainId.PARASTATE, PARASTATECoins);\r\nCOINS.set(chains.ChainId.BSC, BSCcoins);\r\nexport default COINS","import { Contract, ethers } from \"ethers\";\r\nimport * as chains from \"./constants/chains\";\r\nimport COINS from \"./constants/coins\";\r\n\r\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\r\nconst ERC20 = require(\"./build/ERC20.json\");\r\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\r\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\r\n\r\nexport function getProvider() {\r\n  return new ethers.providers.Web3Provider(window.ethereum);\r\n}\r\n\r\nexport function getSigner(provider) {\r\n  return provider.getSigner();\r\n}\r\n\r\nexport async function getNetwork(provider) {\r\n  const network = await provider.getNetwork();\r\n  return network.chainId;\r\n}\r\n\r\nexport function getRouter(address, signer) {\r\n  return new Contract(address, ROUTER.abi, signer);\r\n}\r\n\r\nexport async function checkNetwork(provider) {\r\n  const chainId = getNetwork(provider);\r\n  if (chains.networks.includes(chainId)){\r\n    return true\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function getWeth(address, signer) {\r\n  return new Contract(address, ERC20.abi, signer);\r\n}\r\n\r\nexport function getFactory(address, signer) {\r\n  return new Contract(address, FACTORY.abi, signer);\r\n}\r\n\r\nexport async function getAccount() {\r\n  const accounts = await window.ethereum.request({\r\n    method: \"eth_requestAccounts\",\r\n  });\r\n\r\n  return accounts[0];\r\n}\r\n\r\n//This function checks if a ERC20 token exists for a given address\r\n//    `address` - The Ethereum address to be checked\r\n//    `signer` - The current signer\r\nexport function doesTokenExist(address, signer) {\r\n  try {\r\n    return new Contract(address, ERC20.abi, signer);\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function getDecimals(token) {\r\n  const decimals = await token.decimals().then((result) => {\r\n      return result;\r\n    }).catch((error) => {\r\n      console.log('No tokenDecimals function for this token, set to 0');\r\n      return 0;\r\n    });\r\n    return decimals;\r\n}\r\n\r\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\r\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function getBalanceAndSymbol(\r\n  accountAddress,\r\n  address,\r\n  provider,\r\n  signer,\r\n  weth_address,\r\n  coins\r\n) {\r\n  try {\r\n    if (address === weth_address) {\r\n      const balanceRaw = await provider.getBalance(accountAddress);\r\n\r\n      return {\r\n        balance: ethers.utils.formatEther(balanceRaw),\r\n        symbol: coins[0].abbr,\r\n      };\r\n    } else {\r\n      const token = new Contract(address, ERC20.abi, signer);\r\n      const tokenDecimals = await getDecimals(token);\r\n      const balanceRaw = await token.balanceOf(accountAddress);\r\n      const symbol = await token.symbol();\r\n\r\n      return {\r\n        balance: balanceRaw*10**(-tokenDecimals),\r\n        symbol: symbol,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.log ('The getBalanceAndSymbol function had an error!');\r\n    console.log (error)\r\n    return false;\r\n  }\r\n}\r\n\r\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\r\n// No error handling is done, so any issues can be caught with the use of .catch()\r\n// To work correctly, there needs to be 7 arguments:\r\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\r\n//    `amount` - A float or similar number representing the value of address1's token to trade\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `signer` - The current signer\r\nexport async function swapTokens(\r\n  address1,\r\n  address2,\r\n  amount,\r\n  routerContract,\r\n  accountAddress,\r\n  signer\r\n) {\r\n  const tokens = [address1, address2];\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const tokenDecimals = await getDecimals(token1);\r\n  \r\n  const amountIn = ethers.utils.parseUnits(amount, tokenDecimals);\r\n  const amountOut = await routerContract.callStatic.getAmountsOut(\r\n    amountIn,\r\n    tokens\r\n  );\r\n\r\n  await token1.approve(routerContract.address, amountIn);\r\n  const wethAddress = await routerContract.WETH();\r\n\r\n  if (address1 === wethAddress) {\r\n    // Eth -> Token\r\n    await routerContract.swapExactETHForTokens(\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline,\r\n      { value: amountIn }\r\n    );\r\n  } else if (address2 === wethAddress) {\r\n    // Token -> Eth\r\n    await routerContract.swapExactTokensForETH(\r\n      amountIn,\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline\r\n    );\r\n  } else {\r\n    await routerContract.swapExactTokensForTokens(\r\n      amountIn,\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\n//This function returns the conversion rate between two token addresses\r\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\r\n//    `amountIn` - Amount of the token at address 1 to be swaped from\r\n//    `routerContract` - The router contract to carry out this swap\r\nexport async function getAmountOut(\r\n  address1,\r\n  address2,\r\n  amountIn,\r\n  routerContract,\r\n  signer\r\n) {\r\n  try {\r\n    const token1 = new Contract(address1, ERC20.abi, signer);\r\n    const token1Decimals = await getDecimals(token1);\r\n\r\n    const token2 = new Contract(address2, ERC20.abi, signer);\r\n    const token2Decimals = await getDecimals(token2);\r\n\r\n    const values_out = await routerContract.getAmountsOut(\r\n      ethers.utils.parseUnits(String(amountIn), token1Decimals),\r\n      [address1, address2]\r\n    );\r\n    const amount_out = values_out[1]*10**(-token2Decimals);\r\n    console.log('amount out: ', amount_out)\r\n    return Number(amount_out);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\r\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\r\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\r\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\r\n//    `pair` - The pair contract for the two tokens\r\nexport async function fetchReserves(address1, address2, pair, signer) {\r\n  try {\r\n\r\n    // Get decimals for each coin\r\n    const coin1 = new Contract(address1, ERC20.abi, signer);\r\n    const coin2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n    const coin1Decimals = await getDecimals(coin1);\r\n    const coin2Decimals = await getDecimals(coin2);\r\n\r\n    // Get reserves\r\n    const reservesRaw = await pair.getReserves();\r\n\r\n    // Put the results in the right order\r\n    const results =  [\r\n      (await pair.token0()) === address1 ? reservesRaw[0] : reservesRaw[1],\r\n      (await pair.token1()) === address2 ? reservesRaw[1] : reservesRaw[0],\r\n    ];\r\n\r\n    // Scale each to the right decimal place\r\n    return [\r\n      (results[0]*10**(-coin1Decimals)),\r\n      (results[1]*10**(-coin2Decimals))\r\n    ]\r\n  } catch (err) {\r\n    console.log(\"error!\");\r\n    console.log(err);\r\n    return [0, 0];\r\n  }\r\n}\r\n\r\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\r\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\r\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\nexport async function getReserves(\r\n  address1,\r\n  address2,\r\n  factory,\r\n  signer,\r\n  accountAddress\r\n) {\r\n  try {\r\n    const pairAddress = await factory.getPair(address1, address2);\r\n    const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n  \r\n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\r\n  \r\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer);\r\n      const liquidityTokens_BN = await pair.balanceOf(accountAddress);\r\n      const liquidityTokens = Number(\r\n        ethers.utils.formatEther(liquidityTokens_BN)\r\n      );\r\n    \r\n      return [\r\n        reservesRaw[0].toPrecision(6),\r\n        reservesRaw[1].toPrecision(6),\r\n        liquidityTokens,\r\n      ];\r\n    } else {\r\n      console.log(\"no reserves yet\");\r\n      return [0,0,0];\r\n    }\r\n  }catch (err) {\r\n    console.log(\"error!\");\r\n    console.log(err);\r\n    return [0, 0, 0];\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    padding: theme.spacing(1),\r\n    minHeight: \"80px\",\r\n    backgroundColor: COLORS.cyan[100],\r\n    borderRadius: theme.spacing(2),\r\n    borderColor: COLORS.cyan[300],\r\n    borderWidth: \"1px\",\r\n    borderStyle: \"solid\",\r\n  },\r\n  container_input: {\r\n    padding: theme.spacing(1),\r\n    minHeight: \"68px\",\r\n    backgroundColor: COLORS.cyan[50],\r\n    borderRadius: theme.spacing(2),\r\n    borderColor: COLORS.cyan[300],\r\n    borderWidth: \"1px\",\r\n    borderStyle: \"solid\",\r\n    marginLeft: \"50%\",\r\n    textAlign: \"right\",\r\n  },\r\n  container_blank: {\r\n    padding: theme.spacing(1),\r\n    minHeight: \"80px\",\r\n    borderRadius: theme.spacing(2),\r\n  },\r\n  grid: {\r\n    height: \"60px\",\r\n  },\r\n  fab: {\r\n    zIndex: \"0\",\r\n  },\r\n  input: {\r\n    ...theme.typography.h5,\r\n    width: \"100%\",\r\n  },\r\n  inputBase: {\r\n    textAlign: \"right\",\r\n  },\r\n}));\r\n\r\nCoinField.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  symbol: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  activeField: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport function RemoveLiquidityField1(props) {\r\n  // This component is used to selecting a coin and entering a value, the props are explained below:\r\n  //      onClick - (string) => void - Called when the button is clicked\r\n  //      symbol - string - The text displayed on the button\r\n  //      value - string - The value of the text field\r\n  //      onChange - (e) => void - Called when the text field changes\r\n  //      activeField - boolean - Whether text can be entered into this field or not\r\n\r\n  const classes = useStyles();\r\n  const { onClick, symbol, value, onChange, activeField } = props;\r\n  return (\r\n    <div className={classes.container_blank}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        className={classes.grid}\r\n      >\r\n        {/* Button */}\r\n        <Grid item xs={3}>\r\n          <Fab\r\n            size=\"small\"\r\n            variant=\"extended\"\r\n            onClick={onClick}\r\n            className={classes.fab}\r\n          >\r\n            {symbol}\r\n            <ExpandMoreIcon />\r\n          </Fab>\r\n        </Grid>\r\n        {/* Text Field */}\r\n        <Grid item xs={9}>\r\n          <InputBase\r\n            value={value}\r\n            onChange={onChange}\r\n            placeholder=\"0.0\"\r\n            disabled={!activeField}\r\n            classes={{\r\n              root: classes.container_input,\r\n              input: classes.inputBase,\r\n            }}\r\n          />\r\n        </Grid>\r\n        {/* </div> */}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function RemoveLiquidityField2(props) {\r\n  // This component is used to selecting a coin and entering a value, the props are explained below:\r\n  //      onClick - (string) => void - Called when the button is clicked\r\n  //      symbol - string - The text displayed on the button\r\n  //      value - string - The value of the text field\r\n  //      onChange - (e) => void - Called when the text field changes\r\n  //      activeField - boolean - Whether text can be entered into this field or not\r\n\r\n  const classes = useStyles();\r\n  const { onClick, symbol } = props;\r\n\r\n  return (\r\n    <div className={classes.container_blank}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        className={classes.grid}\r\n      >\r\n        {/* Button */}\r\n        <Grid item xs={3}>\r\n          <Fab\r\n            size=\"small\"\r\n            variant=\"extended\"\r\n            onClick={onClick}\r\n            className={classes.fab}\r\n          >\r\n            {symbol}\r\n            <ExpandMoreIcon />\r\n          </Fab>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function CoinField(props) {\r\n  // This component is used to selecting a token and entering a value, the props are explained below:\r\n  //      onClick - (string) => void - Called when the button is clicked\r\n  //      symbol - string - The text displayed on the button\r\n  //      value - string - The value of the text field\r\n  //      onChange - (e) => void - Called when the text field changes\r\n  //      activeField - boolean - Whether text can be entered into this field or not\r\n\r\n  const classes = useStyles();\r\n  const { onClick, symbol, value, onChange, activeField } = props;\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        className={classes.grid}\r\n      >\r\n        {/* Button */}\r\n        <Grid item xs={3}>\r\n          <Fab\r\n            size=\"small\"\r\n            variant=\"extended\"\r\n            onClick={onClick}\r\n            className={classes.fab}\r\n          >\r\n            {symbol}\r\n            <ExpandMoreIcon />\r\n          </Fab>\r\n        </Grid>\r\n\r\n        {/* Text Field */}\r\n        <Grid item xs={9}>\r\n          <InputBase\r\n            value={value}\r\n            onChange={onChange}\r\n            placeholder=\"0.0\"\r\n            disabled={!activeField}\r\n            classes={{ root: classes.input, input: classes.inputBase }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    width: \"100%\",\r\n    paddingTop: theme.spacing(0.5),\r\n    paddingBottom: theme.spacing(0.5),\r\n    \"&:hover, &$focusVisible\": {\r\n      backgroundColor: COLORS.grey[200],\r\n    },\r\n  },\r\n  coinName: {\r\n    opacity: 0.6,\r\n  },\r\n}));\r\n\r\nCoinButton.propTypes = {\r\n  coinName: PropTypes.string.isRequired,\r\n  coinAbbr: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function CoinButton(props) {\r\n  const { coinName, coinAbbr, onClick, ...other } = props;\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ButtonBase focusRipple className={classes.button} onClick={onClick}>\r\n      <Grid container direction=\"column\">\r\n        <Typography variant=\"h6\">{coinAbbr}</Typography>\r\n        <Typography variant=\"body2\" className={classes.coinName}>\r\n          {coinName}\r\n        </Typography>\r\n      </Grid>\r\n    </ButtonBase>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  TextField,\r\n  Typography,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport CoinButton from \"./CoinButton\";\r\nimport { doesTokenExist } from \"../ethereumFunctions\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\n\r\nconst styles = (theme) => ({\r\n  dialogContainer: {\r\n    borderRadius: theme.spacing(2),\r\n  },\r\n  titleSection: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  titleText: {\r\n    alignSelf: \"center\",\r\n  },\r\n  hr: {\r\n    margin: 0,\r\n  },\r\n  address: {\r\n    paddingLeft: theme.spacing(2.5),\r\n    paddingRight: theme.spacing(2.5),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  coinList: {\r\n    height: \"300px\",\r\n    overflowY: \"scroll\",\r\n  },\r\n  coinContainer: {\r\n    paddingLeft: theme.spacing(0.5),\r\n    paddingRight: theme.spacing(0.5),\r\n    paddingTop: theme.spacing(2),\r\n    marginTop: theme.spacing(2),\r\n    overflow: \"hidden\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle\r\n      disableTypography\r\n      className={classes.titleSection}\r\n      {...other}\r\n    >\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignContent=\"center\"\r\n      >\r\n        <Typography variant=\"h6\" className={classes.titleText}>\r\n          {children}\r\n        </Typography>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </Grid>\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n    backgroundColor: COLORS.grey[100],\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nCoinDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  coins: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default function CoinDialog(props) {\r\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\r\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\r\n  // addresses will first be validated to make sure they exist.\r\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\r\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\r\n\r\n  const classes = useStyles();\r\n  const { onClose, open, coins, signer, ...others } = props;\r\n\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [error, setError] = React.useState(\"\");\r\n\r\n  // Called when the user tries to input a custom address, this function will validate the address and will either\r\n  // then close the dialog and return the validated address, or will display an error.\r\n  const submit = () => {\r\n    if (doesTokenExist(address, signer)) {\r\n      exit(address);\r\n    } else {\r\n      setError(\"This address is not valid\");\r\n    }\r\n  };\r\n\r\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\r\n  const exit = (value) => {\r\n    setError(\"\");\r\n    setAddress(\"\");\r\n    onClose(value);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={() => exit(undefined)}\r\n      fullWidth\r\n      maxWidth=\"sm\"\r\n      classes={{ paper: classes.dialogContainer }}\r\n    >\r\n      <DialogTitle onClose={() => exit(undefined)}>Select Coin</DialogTitle>\r\n\r\n      <hr className={classes.hr} />\r\n\r\n      <div className={classes.coinContainer}>\r\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\r\n          <TextField\r\n            value={address}\r\n            onChange={(e) => setAddress(e.target.value)}\r\n            variant=\"outlined\"\r\n            placeholder=\"Paste Address\"\r\n            error={error !== \"\"}\r\n            helperText={error}\r\n            fullWidth\r\n            className={classes.address}\r\n          />\r\n\r\n          <hr className={classes.hr} />\r\n\r\n          <Grid item className={classes.coinList}>\r\n            <Grid container direction=\"column\">\r\n              {/* Maps all of the tokens in the constants file to buttons */}\r\n              {coins.map((coin, index) => (\r\n                <Grid item key={index} xs={12}>\r\n                  <CoinButton\r\n                    coinName={coin.name}\r\n                    coinAbbr={coin.abbr}\r\n                    onClick={() => exit(coin.address)}\r\n                  />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n\r\n      <hr className={classes.hr} />\r\n\r\n      <DialogActions>\r\n        <Button autoFocus onClick={submit} color=\"primary\">\r\n          Enter\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport red from \"@material-ui/core/colors/red\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  wrapper: {\r\n    margin: 0,\r\n    position: \"relative\",\r\n  },\r\n  progress: {\r\n    color: green[500],\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    marginTop: -12,\r\n    marginLeft: -12,\r\n  },\r\n}));\r\n\r\nexport default function LoadingButton(props) {\r\n  const classes = useStyles();\r\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        fullWidth\r\n        disabled={loading || !valid}\r\n        type=\"submit\"\r\n        onClick={onClick}\r\n        {...other}\r\n      >\r\n        {children}\r\n      </Button>\r\n      {loading && <CircularProgress size={24} className={classes.progress} />}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Dialog,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Typography,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst styles = (theme) => ({\r\n  dialogContainer: {\r\n    borderRadius: theme.spacing(2),\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function WrongNetwork(props) {\r\n\r\n  const classes = useStyles();\r\n  const {open} = props;\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      fullWidth\r\n      maxWidth=\"sm\"\r\n      classes={{ paper: classes.dialogContainer }}\r\n    >\r\n      <MuiDialogTitle>Unsupported Network</MuiDialogTitle>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getProvider,\r\n  getRouter,\r\n  getSigner,\r\n  getNetwork,\r\n  getAmountOut,\r\n  getBalanceAndSymbol,\r\n  getWeth,\r\n  swapTokens,\r\n  getReserves,\r\n} from \"../ethereumFunctions\";\r\nimport CoinField from \"./CoinField\";\r\nimport CoinDialog from \"./CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport WrongNetwork from \"../Components/wrongNetwork\";\r\nimport COINS from \"../constants/coins\";\r\nimport * as chains from \"../constants/chains\";\r\nimport { cyan } from \"@material-ui/core/colors\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    color:\"cyan\"\r\n  },\r\n  switchButton: {\r\n    zIndex: 1,\r\n    margin: \"-16px\",\r\n    padding: theme.spacing(0.5),\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    textAlign: \"left\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n    \r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n    color:\"cyan\"\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  footer: {\r\n    marginTop: \"285px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction CoinSwapper(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores information for the Autonity Network\r\n\r\n  const [provider, setProvider] = React.useState(getProvider());\r\n  const [signer, setSigner] = React.useState(getSigner(provider));\r\n\r\n  // The following are populated in a react hook\r\n  const [account, setAccount] = React.useState(undefined);\r\n  const [chainId, setChainId] = React.useState(undefined);\r\n  const [router, setRouter] = React.useState(undefined);\r\n  const [weth, setWeth] = React.useState(undefined);\r\n  const [factory, setFactory] = React.useState(undefined);\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  const [coins, setCoins] = React.useState([]);\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n  const [field2Value, setField2Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setField1Value(field2Value);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return reserve + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n\r\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\r\n    const parsedInput1 = parseFloat(field1Value);\r\n    const parsedInput2 = parseFloat(field2Value);\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      !isNaN(parsedInput1) &&\r\n      !isNaN(parsedInput2) &&\r\n      0 < parsedInput1 &&\r\n      parsedInput1 <= coin1.balance\r\n    );\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin2.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\r\n        setCoin1({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\r\n  const swap = () => {\r\n    console.log(\"Attempting to swap tokens...\");\r\n    setLoading(true);\r\n\r\n    swapTokens(\r\n      coin1.address,\r\n      coin2.address,\r\n      field1Value,\r\n      router,\r\n      account,\r\n      signer\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\r\n          variant: \"error\",\r\n          autoHideDuration: 10000,\r\n        });\r\n      });\r\n  };\r\n\r\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\r\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\r\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\r\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\r\n  // of the two coins change.\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address) {\r\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\r\n        (data) => setReserves(data)\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, account, factory, router, signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\r\n  // It attempts to calculate and set the state variable `field2Value`\r\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\r\n  // the value in the output box will change.\r\n  useEffect(() => {\r\n    if (isNaN(parseFloat(field1Value))) {\r\n      setField2Value(\"\");\r\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\r\n      getAmountOut(coin1.address, coin2.address, field1Value, router, signer).then(\r\n        (amount) => setField2Value(amount.toFixed(7))\r\n      ).catch(e => {\r\n        console.log(e);\r\n        setField2Value(\"NA\");\r\n      })\r\n    } else {\r\n      setField2Value(\"\");\r\n    }\r\n  }, [field1Value, coin1.address, coin2.address]);\r\n\r\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n  useEffect(() => {\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log(\"Checking balances...\");\r\n\r\n      if (coin1.address && coin2.address && account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          factory,\r\n          signer,\r\n          account\r\n        ).then((data) => setReserves(data));\r\n      }\r\n\r\n      if (coin1.address && account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(account, coin1.address, provider, signer, weth.address, coins).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2.address && account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(account, coin2.address, provider, signer, weth.address, coins).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\r\n  useEffect(() => {\r\n    \r\n    getAccount().then((account) => {\r\n      setAccount(account);\r\n    });\r\n\r\n    async function Network() {\r\n      const chainId = await getNetwork(provider).then((chainId) => {\r\n        setChainId(chainId);\r\n        return chainId;\r\n      });\r\n\r\n      if (chains.networks.includes(chainId)){\r\n        setwrongNetworkOpen(false);\r\n        console.log('chainID: ', chainId);\r\n        // Get the router using the chainID\r\n        const router = await getRouter (chains.routerAddress.get(chainId), signer)\r\n        setRouter(router);\r\n        // Get Weth address from router\r\n        await router.WETH().then((wethAddress) => {\r\n          console.log('Weth: ', wethAddress);\r\n          setWeth(getWeth (wethAddress, signer));\r\n          // Set the value of the weth address in the default coins array\r\n          const coins = COINS.get(chainId);\r\n          coins[0].address = wethAddress;\r\n          setCoins(coins);\r\n        });\r\n        // Get the factory address from the router\r\n        await router.factory().then((factory_address) => {\r\n          setFactory(getFactory (factory_address, signer));\r\n        })\r\n      } else {\r\n        console.log('Wrong network mate.');\r\n        setwrongNetworkOpen(true);\r\n      }\r\n    }\r\n\r\n    Network()\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={coins}\r\n        signer={signer}\r\n      />\r\n      <CoinDialog\r\n        open={dialog2Open}\r\n        onClose={onToken2Selected}\r\n        coins={coins}\r\n        signer={signer}\r\n      />\r\n      <WrongNetwork\r\n        open={wrongNetworkOpen}\r\n        />\r\n\r\n      {/* Coin Swapper */}\r\n      <Container maxWidth=\"xs\">\r\n        <Paper className={classes.paperContainer}>\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n            Swap\r\n          </Typography>\r\n\r\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={true}\r\n                value={field1Value}\r\n                onClick={() => setDialog1Open(true)}\r\n                onChange={handleChange.field1}\r\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n              />\r\n            </Grid>\r\n\r\n            <IconButton onClick={switchFields} className={classes.switchButton}>\r\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\r\n            </IconButton>\r\n\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={false}\r\n                value={field2Value}\r\n                onClick={() => setDialog2Open(true)}\r\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n              />\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Balance Display */}\r\n            <Typography variant=\"h6\">Your Balances</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(coin1.balance, coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(coin2.balance, coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Reserves Display */}\r\n            <Typography variant=\"h6\">Reserves</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatReserve(reserves[0], coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatReserve(reserves[1], coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            <LoadingButton\r\n              loading={loading}\r\n              valid={isButtonEnabled()}\r\n              success={false}\r\n              fail={false}\r\n              onClick={swap}\r\n            >\r\n              <LoopIcon />\r\n              Swap\r\n            </LoadingButton>\r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <p>\r\n          DataCurrency | Software Engineer: Fernando Lopes{\" \"}\r\n          \r\n        </p>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CoinSwapper;\r\n","import React from \"react\";\r\nimport { ButtonGroup, Button } from \"@material-ui/core\";\r\n\r\nexport default function SwitchButton(props) {\r\n  const { setDeploy } = props;\r\n\r\n  const changeStyles = (K) => {\r\n    if (K === true) {\r\n      let add_button = document.getElementById(\"add-button\");\r\n      add_button.style.backgroundColor = \"#ff0000\";\r\n\r\n      let remove_button = document.getElementById(\"remove-button\");\r\n      remove_button.style.backgroundColor = \"#9e9e9e\";\r\n    } else {\r\n      let remove_button = document.getElementById(\"remove-button\");\r\n      remove_button.style.backgroundColor = \"#ff0000\";\r\n\r\n      let add_button = document.getElementById(\"add-button\");\r\n      add_button.style.backgroundColor = \"#9e9e9e\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ButtonGroup size=\"large\" variant=\"contained\">\r\n        <Button\r\n          id=\"add-button\"\r\n          color=\"primary\"\r\n          text=\"white\"\r\n          onClick={() => {\r\n            setDeploy(true);\r\n            changeStyles(true);\r\n          }}\r\n        >\r\n          Deploy Liquidity\r\n        </Button>\r\n\r\n        <Button\r\n          id=\"remove-button\"\r\n          color=\"secondary\"\r\n          text=\"white\"\r\n          onClick={() => {\r\n            setDeploy(false);\r\n            changeStyles(false);\r\n          }}\r\n        >\r\n          Remove Liquidity\r\n        </Button>\r\n      </ButtonGroup>\r\n    </div>\r\n  );\r\n}\r\n","import { Contract, ethers } from \"ethers\";\r\nimport { fetchReserves, getDecimals } from \"../ethereumFunctions\";\r\n\r\nconst ERC20 = require(\"../build/ERC20.json\");\r\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\r\n\r\n// Function used to add Liquidity to any pair of tokens or token-AUT\r\n// To work correctly, there needs to be 9 arguments:\r\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\r\n//    `amount1` - A float or similar number representing the value of address1's coin to add\r\n//    `amount2` - A float or similar number representing the value of address2's coin to add\r\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\r\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function addLiquidity(\r\n  address1,\r\n  address2,\r\n  amount1,\r\n  amount2,\r\n  amount1min,\r\n  amount2min,\r\n  routerContract,\r\n  account,\r\n  signer\r\n) {\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  const token1Decimals = await getDecimals(token1);\r\n  const token2Decimals = await getDecimals(token2);\r\n\r\n  const amountIn1 = ethers.utils.parseUnits(amount1, token1Decimals);\r\n  const amountIn2 = ethers.utils.parseUnits(amount2, token2Decimals);\r\n\r\n  const amount1Min = ethers.utils.parseUnits(amount1min, token1Decimals);\r\n  const amount2Min = ethers.utils.parseUnits(amount2min, token2Decimals);\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  await token1.approve(routerContract.address, amountIn1);\r\n  await token2.approve(routerContract.address, amountIn2);\r\n\r\n  const wethAddress = await routerContract.WETH();\r\n\r\n  console.log([\r\n    address1,\r\n    address2,\r\n    amountIn1,\r\n    amountIn2,\r\n    amount1Min,\r\n    amount2Min,\r\n    account,\r\n    deadline,\r\n  ]);\r\n\r\n  if (address1 === wethAddress) {\r\n    // Eth + Token\r\n    await routerContract.addLiquidityETH(\r\n      address2,\r\n      amountIn2,\r\n      amount2Min,\r\n      amount1Min,\r\n      account,\r\n      deadline,\r\n      { value: amountIn1 }\r\n    );\r\n  } else if (address2 === wethAddress) {\r\n    // Token + Eth\r\n    await routerContract.addLiquidityETH(\r\n      address1,\r\n      amountIn1,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline,\r\n      { value: amountIn2 }\r\n    );\r\n  } else {\r\n    // Token + Token\r\n    await routerContract.addLiquidity(\r\n      address1,\r\n      address2,\r\n      amountIn1,\r\n      amountIn2,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\n// Function used to remove Liquidity from any pair of tokens or token-AUT\r\n// To work correctly, there needs to be 9 arguments:\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\r\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\r\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function removeLiquidity(\r\n  address1,\r\n  address2,\r\n  liquidity_tokens,\r\n  amount1min,\r\n  amount2min,\r\n  routerContract,\r\n  account,\r\n  signer,\r\n  factory\r\n) {\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  const token1Decimals = await getDecimals(token1);\r\n  const token2Decimals = await getDecimals(token2);\r\n\r\n  const Getliquidity = (liquidity_tokens)=>{\r\n    if (liquidity_tokens < 0.001){\r\n      return ethers.BigNumber.from(liquidity_tokens*10**18);\r\n    }\r\n    return ethers.utils.parseUnits(String(liquidity_tokens), 18);\r\n  }\r\n\r\n  const liquidity = Getliquidity(liquidity_tokens);\r\n  console.log('liquidity: ', liquidity);\r\n\r\n  const amount1Min = ethers.utils.parseUnits(String(amount1min), token1Decimals);\r\n  const amount2Min = ethers.utils.parseUnits(String(amount2min), token2Decimals);\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const wethAddress = await routerContract.WETH();\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  await pair.approve(routerContract.address, liquidity);\r\n\r\n  console.log([\r\n    address1,\r\n    address2,\r\n    Number(liquidity),\r\n    Number(amount1Min),\r\n    Number(amount2Min),\r\n    account,\r\n    deadline,\r\n  ]);\r\n\r\n  if (address1 === wethAddress) {\r\n    // Eth + Token\r\n    await routerContract.removeLiquidityETH(\r\n      address2,\r\n      liquidity,\r\n      amount2Min,\r\n      amount1Min,\r\n      account,\r\n      deadline\r\n    );\r\n  } else if (address2 === wethAddress) {\r\n    // Token + Eth\r\n    await routerContract.removeLiquidityETH(\r\n      address1,\r\n      liquidity,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  } else {\r\n    // Token + Token\r\n    await routerContract.removeLiquidity(\r\n      address1,\r\n      address2,\r\n      liquidity,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\nconst quote = (amount1, reserve1, reserve2) => {\r\n  const amount2 = amount1 * (reserve2 / reserve1);\r\n  return [amount2];\r\n};\r\n\r\n// Function used to get a quote of the liquidity addition\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\r\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\n\r\nasync function quoteMintLiquidity(\r\n  address1,\r\n  address2,\r\n  amountA,\r\n  amountB,\r\n  factory,\r\n  signer\r\n){\r\n  const MINIMUM_LIQUIDITY = 1000;\r\n  let _reserveA = 0;\r\n  let _reserveB = 0;\r\n  let totalSupply = 0;\r\n  [_reserveA, _reserveB, totalSupply] = await factory.getPair(address1, address2).then(async (pairAddress) => {\r\n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\r\n      const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\r\n      const reserveA = reservesRaw[0];\r\n      const reserveB = reservesRaw[1];\r\n    \r\n      const _totalSupply = await pair.totalSupply();\r\n      const totalSupply = Number(ethers.utils.formatEther(_totalSupply));\r\n      return [reserveA, reserveB, totalSupply]\r\n    } else {\r\n      return [0,0,0]\r\n    }\r\n  });\r\n\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  // Need to do all this decimals work to account for 0 decimal numbers\r\n\r\n  const token1Decimals = await getDecimals(token1);\r\n  const token2Decimals = await getDecimals(token2);\r\n\r\n  const valueA = amountA*(10**token1Decimals);\r\n  const valueB = amountB*(10**token2Decimals);\r\n\r\n  const reserveA = _reserveA*(10**token1Decimals);\r\n  const reserveB = _reserveB*(10**token2Decimals);\r\n\r\n  if (totalSupply == 0){\r\n    return Math.sqrt(((valueA * valueB)-MINIMUM_LIQUIDITY))*10**(-18);\r\n  };\r\n  \r\n  return (\r\n    Math.min(valueA*totalSupply/reserveA, valueB*totalSupply/reserveB)\r\n  );\r\n};\r\n\r\nexport async function quoteAddLiquidity(\r\n  address1,\r\n  address2,\r\n  amountADesired,\r\n  amountBDesired,\r\n  factory,\r\n  signer\r\n) {\r\n\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\r\n  const reserveA = reservesRaw[0];\r\n  const reserveB = reservesRaw[1];\r\n\r\n  if (reserveA === 0 && reserveB === 0) {\r\n    const amountOut = await quoteMintLiquidity(\r\n      address1,\r\n      address2,\r\n      amountADesired,\r\n      amountBDesired,\r\n      factory,\r\n      signer);\r\n    return [\r\n      amountADesired,\r\n      amountBDesired,\r\n      amountOut.toPrecision(8),\r\n    ];\r\n  } else {\r\n    const amountBOptimal = quote(amountADesired, reserveA, reserveB);\r\n    if (amountBOptimal <= amountBDesired) {\r\n      const amountOut = await quoteMintLiquidity(\r\n        address1,\r\n        address2,\r\n        amountADesired,\r\n        amountBOptimal,\r\n        factory,\r\n        signer);\r\n      return [\r\n        amountADesired,\r\n        amountBOptimal,\r\n        amountOut.toPrecision(8),\r\n      ];\r\n    } else {\r\n      const amountAOptimal = quote(\r\n        amountBDesired,\r\n        reserveB,\r\n        reserveA\r\n      );\r\n      const amountOut = await quoteMintLiquidity(\r\n        address1,\r\n        address2,\r\n        amountAOptimal,\r\n        amountBDesired,\r\n        factory,\r\n        signer);\r\n      return [\r\n        amountAOptimal,\r\n        amountBDesired,\r\n        amountOut.toPrecision(8),\r\n      ];\r\n    }\r\n  }\r\n}\r\n\r\n// Function used to get a quote of the liquidity removal\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\n\r\nexport async function quoteRemoveLiquidity(\r\n  address1,\r\n  address2,\r\n  liquidity,\r\n  factory,\r\n  signer\r\n) {\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  console.log(\"pair address\", pairAddress);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\r\n  const reserveA = reservesRaw[0];\r\n  const reserveB = reservesRaw[1];\r\n\r\n  const feeOn =\r\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\r\n\r\n  const _kLast = await pair.kLast();\r\n  const kLast = Number(ethers.utils.formatEther(_kLast));\r\n\r\n  const _totalSupply = await pair.totalSupply();\r\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\r\n\r\n  if (feeOn && kLast > 0) {\r\n    const feeLiquidity =\r\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\r\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\r\n    totalSupply = totalSupply + feeLiquidity;\r\n  }\r\n\r\n  const Aout = (reserveA * liquidity) / totalSupply;\r\n  const Bout = (reserveB * liquidity) / totalSupply;\r\n\r\n  return [liquidity, Aout, Bout];\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getProvider,\r\n  getRouter,\r\n  getSigner,\r\n  getBalanceAndSymbol,\r\n  getWeth,\r\n  getReserves,\r\n  getNetwork\r\n} from \"../ethereumFunctions\";\r\n\r\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\r\n\r\nimport CoinField from \"../CoinSwapper/CoinField\";\r\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport WrongNetwork from \"../Components/wrongNetwork\";\r\nimport COINS from \"../constants/coins\";\r\nimport * as chains from \"../constants/chains\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n    paddingBottom: theme.spacing(3),\r\n    width: \"40%\",\r\n    overflow: \"wrap\",\r\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\r\n    color: \"white\",\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  values: {\r\n    width: \"50%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1),\r\n    padding: theme.spacing(0.4),\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction LiquidityDeployer(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores information for the Autonity Network\r\n  const [provider, setProvider] = React.useState(getProvider());\r\n  const [signer, setSigner] = React.useState(getSigner(provider));\r\n\r\n  // The following are populated in a react hook\r\n  const [account, setAccount] = React.useState(undefined);\r\n  const [chainId, setChainId] = React.useState(undefined);\r\n  const [router, setRouter] = React.useState(undefined);\r\n  const [weth, setWeth] = React.useState(undefined);\r\n  const [factory, setFactory] = React.useState(undefined);\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  const [coins, setCoins] = React.useState([]);\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n  const [field2Value, setField2Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Stores the user's balance of liquidity tokens for the current pair\r\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\r\n\r\n  // Used when getting a quote of liquidity\r\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    let oldField1Value = field1Value;\r\n    let oldField2Value = field2Value;\r\n\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setField1Value(oldField2Value);\r\n    setField2Value(oldField1Value);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n    field2: (e) => {\r\n      setField2Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return reserve + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n\r\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\r\n    const parsedInput1 = parseFloat(field1Value);\r\n    const parsedInput2 = parseFloat(field2Value);\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      parsedInput1 !== NaN &&\r\n      0 < parsedInput1 &&\r\n      parsedInput2 !== NaN &&\r\n      0 < parsedInput2 &&\r\n      parsedInput1 <= coin1.balance &&\r\n      parsedInput2 <= coin2.balance\r\n    );\r\n  };\r\n\r\n\r\n\r\n  const deploy = () => {\r\n    console.log(\"Attempting to deploy liquidity...\");\r\n    setLoading(true);\r\n\r\n    addLiquidity(\r\n      coin1.address,\r\n      coin2.address,\r\n      field1Value,\r\n      field2Value,\r\n      '0',\r\n      '0',\r\n      router,\r\n      account,\r\n      signer\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        setField2Value(\"\");\r\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\r\n          variant: \"error\",\r\n          autoHideDuration: 10000,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin2.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\r\n        setCoin1({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address && account) {\r\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\r\n        (data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        }\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, account, factory, signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\r\n  // It will give a preview of the liquidity deployment.\r\n  useEffect(() => {\r\n    if (isButtonEnabled()) {\r\n      console.log(\"Trying to preview the liquidity deployment\");\r\n\r\n      quoteAddLiquidity(\r\n        coin1.address,\r\n        coin2.address,\r\n        field1Value,\r\n        field2Value,\r\n        factory,\r\n        signer\r\n      ).then((data) => {\r\n        // console.log(data);\r\n        console.log(\"TokenA in: \", data[0]);\r\n        console.log(\"TokenB in: \", data[1]);\r\n        console.log(\"Liquidity out: \", data[2]);\r\n        setLiquidityOut([data[0], data[1], data[2]]);\r\n      });\r\n    }\r\n  }, [coin1.address, coin2.address, field1Value, field2Value, factory, signer]);\r\n\r\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n  useEffect(() => {\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log(\"Checking balances & Getting reserves...\");\r\n\r\n      if (coin1.address && coin2.address && account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          factory,\r\n          signer,\r\n          account\r\n        ).then((data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        });\r\n      }\r\n\r\n      if (coin1.address && account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(account, coin1.address, provider, signer, weth.address, coins).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2.address && account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(account, coin2.address, provider, signer, weth.address, coins).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\r\n  useEffect(() => {\r\n    \r\n    getAccount().then((account) => {\r\n      setAccount(account);\r\n    });\r\n\r\n    async function Network() {\r\n      const chainId = await getNetwork(provider).then((chainId) => {\r\n        setChainId(chainId);\r\n        return chainId;\r\n      });\r\n\r\n      if (chains.networks.includes(chainId)){\r\n        setwrongNetworkOpen(false);\r\n        console.log('chainID: ', chainId);\r\n        // Get the router using the chainID\r\n        const router = await getRouter (chains.routerAddress.get(chainId), signer)\r\n        setRouter(router);\r\n        // Get Weth address from router\r\n        await router.WETH().then((wethAddress) => {\r\n          setWeth(getWeth (wethAddress, signer));\r\n          // Set the value of the weth address in the default coins array\r\n          const coins = COINS.get(chainId);\r\n          coins[0].address = wethAddress;\r\n          setCoins(coins);\r\n        });\r\n        // Get the factory address from the router\r\n        await router.factory().then((factory_address) => {\r\n          setFactory(getFactory (factory_address, signer));\r\n        })\r\n      } else {\r\n        console.log('Wrong network mate.');\r\n        setwrongNetworkOpen(true);\r\n      }\r\n    }\r\n\r\n    Network()\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Liquidity deployer */}\r\n      <Typography variant=\"h5\" className={classes.title}></Typography>\r\n\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={coins}\r\n        signer={signer}\r\n      />\r\n      <CoinDialog\r\n        open={dialog2Open}\r\n        onClose={onToken2Selected}\r\n        coins={coins}\r\n        signer={signer}\r\n      />\r\n      <WrongNetwork\r\n        open={wrongNetworkOpen}\r\n      />\r\n\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <CoinField\r\n            activeField={true}\r\n            value={field1Value}\r\n            onClick={() => setDialog1Open(true)}\r\n            onChange={handleChange.field1}\r\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <CoinField\r\n            activeField={true}\r\n            value={field2Value}\r\n            onClick={() => setDialog2Open(true)}\r\n            onChange={handleChange.field2}\r\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        spacing={4}\r\n        className={classes.balance}\r\n      >\r\n        <hr className={classes.hr} />\r\n        <Grid\r\n          container\r\n          item\r\n          className={classes.values}\r\n          direction=\"column\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          {/* Balance Display */}\r\n          <Typography variant=\"h6\">Your Balances</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatBalance(coin1.balance, coin1.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatBalance(coin2.balance, coin2.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <hr className={classes.hr} />\r\n\r\n          {/* Reserves Display */}\r\n          <Typography variant=\"h6\">Reserves</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(reserves[0], coin1.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(reserves[1], coin2.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <hr className={classes.hr} />\r\n\r\n          {/* Liquidity Tokens Display */}\r\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"center\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Paper className={classes.paperContainer}>\r\n          {/*Red  Display to show the quote */}\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            spacing={2}\r\n            className={classes.fullWidth}\r\n          >\r\n            {/* Tokens in */}\r\n            <Typography variant=\"h6\">Tokens in</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(liquidityOut[0], coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(liquidityOut[1], coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Liquidity Tokens Display */}\r\n            <Typography variant=\"h6\">Liquidity Pool Tokens Out</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatReserve(liquidityOut[2], \"UNI-V2\")}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n\r\n        <hr className={classes.hr} />\r\n      </Grid>\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <LoadingButton\r\n          loading={loading}\r\n          valid={isButtonEnabled()}\r\n          success={false}\r\n          fail={false}\r\n          onClick={deploy}\r\n        >\r\n          <AccountBalanceIcon className={classes.buttonIcon} />\r\n          Deploy\r\n        </LoadingButton>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiquidityDeployer;\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getProvider,\r\n  getRouter,\r\n  getSigner,\r\n  getBalanceAndSymbol,\r\n  getWeth,\r\n  getReserves,\r\n  getNetwork\r\n} from \"../ethereumFunctions\";\r\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\r\nimport {\r\n  RemoveLiquidityField1,\r\n  RemoveLiquidityField2,\r\n} from \"../CoinSwapper/CoinField\";\r\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport WrongNetwork from \"../Components/wrongNetwork\";\r\nimport COINS from \"../constants/coins\";\r\nimport * as chains from \"../constants/chains\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n    paddingBottom: theme.spacing(3),\r\n    width: \"40%\",\r\n    overflow: \"wrap\",\r\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\r\n    color: \"white\",\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  values: {\r\n    width: \"50%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1),\r\n    padding: theme.spacing(0.4),\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction LiquidityRemover(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores information for the Autonity Network\r\n  const [provider, setProvider] = React.useState(getProvider());\r\n  const [signer, setSigner] = React.useState(getSigner(provider));\r\n\r\n  // The following are populated in a react hook\r\n  const [account, setAccount] = React.useState(undefined);\r\n  const [chainId, setChainId] = React.useState(undefined);\r\n  const [router, setRouter] = React.useState(undefined);\r\n  const [weth, setWeth] = React.useState(undefined);\r\n  const [factory, setFactory] = React.useState(undefined);\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\r\n\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  const [coins, setCoins] = React.useState([]);\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Stores the liquidity tokens balance of the user\r\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\r\n\r\n  // Stores the input and output for the liquidity removal preview\r\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return reserve + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n\r\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\r\n    const parsedInput = parseFloat(field1Value);\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      parsedInput !== NaN &&\r\n      0 < parsedInput &&\r\n      parsedInput <= liquidityTokens\r\n    );\r\n  };\r\n\r\n  const remove = () => {\r\n    console.log(\"Attempting to remove liquidity...\");\r\n    setLoading(true);\r\n\r\n    removeLiquidity(\r\n      coin1.address,\r\n      coin2.address,\r\n      field1Value,\r\n      0,\r\n      0,\r\n      router,\r\n      account,\r\n      signer,\r\n      factory\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\r\n          variant: \"error\",\r\n          autoHideDuration: 10000,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin2.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\r\n        setCoin1({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address && account) {\r\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\r\n        (data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        }\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, account, factory, signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value`, `coin1.address` or `coin2.address` change.\r\n  // It will give a preview of the liquidity removal.\r\n  useEffect(() => {\r\n    if (isButtonEnabled()) {\r\n      console.log(\"Trying to preview the liquidity removal\");\r\n      quoteRemoveLiquidity(\r\n        coin1.address,\r\n        coin2.address,\r\n        field1Value,\r\n        factory,\r\n        signer\r\n      ).then((data) => {\r\n        setTokensOut(data);\r\n      });\r\n    }\r\n  }, [coin1.address, coin2.address, field1Value, factory, signer]);\r\n\r\n  useEffect(() => {\r\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log(\"Checking balances & Getting reserves...\");\r\n\r\n      if (coin1.address && coin2.address && account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          factory,\r\n          signer,\r\n          account\r\n        ).then((data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        });\r\n      }\r\n\r\n      if (coin1.address && account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(account, coin1.address, provider, signer, weth.address, coins).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2.address && account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(account, coin2.address, provider, signer, weth.address, coins).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  useEffect(() => {\r\n    \r\n    getAccount().then((account) => {\r\n      setAccount(account);\r\n    });\r\n\r\n    async function Network() {\r\n      const chainId = await getNetwork(provider).then((chainId) => {\r\n        setChainId(chainId);\r\n        return chainId;\r\n      });\r\n\r\n      if (chains.networks.includes(chainId)){\r\n        setwrongNetworkOpen(false);\r\n        console.log('chainID: ', chainId);\r\n        // Get the router using the chainID\r\n        const router = await getRouter (chains.routerAddress.get(chainId), signer)\r\n        setRouter(router);\r\n        // Get Weth address from router\r\n        await router.WETH().then((wethAddress) => {\r\n          setWeth(getWeth (wethAddress, signer));\r\n          // Set the value of the weth address in the default coins array\r\n          const coins = COINS.get(chainId);\r\n          coins[0].address = wethAddress;\r\n          setCoins(coins);\r\n        });\r\n        // Get the factory address from the router\r\n        await router.factory().then((factory_address) => {\r\n          setFactory(getFactory (factory_address, signer));\r\n        })\r\n      } else {\r\n        console.log('Wrong network mate.');\r\n        setwrongNetworkOpen(true);\r\n      }\r\n    }\r\n\r\n    Network()\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Coin Swapper */}\r\n      <Typography variant=\"h5\" className={classes.title}></Typography>\r\n\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={coins}\r\n        signer={signer}\r\n      />\r\n      <CoinDialog\r\n        open={dialog2Open}\r\n        onClose={onToken2Selected}\r\n        coins={coins}\r\n        signer={signer}\r\n      />\r\n      <WrongNetwork\r\n        open={wrongNetworkOpen}\r\n      />\r\n\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <RemoveLiquidityField1\r\n            activeField={true}\r\n            value={field1Value}\r\n            onClick={() => setDialog1Open(true)}\r\n            onChange={handleChange.field1}\r\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <RemoveLiquidityField2\r\n            activeField={true}\r\n            onClick={() => setDialog2Open(true)}\r\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        spacing={4}\r\n        className={classes.balance}\r\n      >\r\n        <hr className={classes.hr} />\r\n        <Grid\r\n          container\r\n          item\r\n          className={classes.values}\r\n          direction=\"column\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          {/* Balance Display */}\r\n          <Typography variant=\"h6\">Your Balances</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatBalance(coin1.balance, coin1.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatBalance(coin2.balance, coin2.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <hr className={classes.hr} />\r\n\r\n          {/* Reserves Display */}\r\n          <Typography variant=\"h6\">Reserves</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(reserves[0], coin1.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(reserves[1], coin2.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <hr className={classes.hr} />\r\n\r\n          {/* Liquidity Tokens Display */}\r\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"center\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Paper className={classes.paperContainer}>\r\n          {/*Red  Display to show the quote */}\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            spacing={2}\r\n            className={classes.fullWidth}\r\n          >\r\n            {/* Tokens in */}\r\n            <Typography variant=\"h6\">Liquidity Pool Tokens in</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(tokensOut[0], \"UNI-V2\")}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Liquidity Tokens Display */}\r\n            <Typography variant=\"h6\">Tokens Out</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(tokensOut[1], coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(tokensOut[2], coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n        <hr className={classes.hr} />\r\n      </Grid>\r\n\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <LoadingButton\r\n          loading={loading}\r\n          valid={isButtonEnabled()}\r\n          success={false}\r\n          fail={false}\r\n          onClick={remove}\r\n        >\r\n          <ArrowDownwardIcon className={classes.buttonIcon} />\r\n          Remove\r\n        </LoadingButton>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiquidityRemover;\r\n","import React from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport SwitchButton from \"./SwitchButton\";\r\nimport LiquidityDeployer from \"./LiquidityDeployer\";\r\nimport LiquidityRemover from \"./RemoveLiquidity\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    maxWidth: 700,\r\n    margin: \"auto\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  footer: {\r\n    marginTop: \"155px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction Liquidity() {\r\n  const classes = useStyles();\r\n\r\n  const [deploy, setDeploy] = React.useState(true);\r\n\r\n  const deploy_or_remove = (deploy) => {\r\n    if (deploy === true) {\r\n      return <LiquidityDeployer />;\r\n    }\r\n    return <LiquidityRemover />;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Paper className={classes.paperContainer}>\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n            <SwitchButton setDeploy={setDeploy} />\r\n          </Typography>\r\n\r\n          {deploy_or_remove(deploy)}\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <p>\r\n          Datacurrency | Software Engineer Fernando Lopes{\" \"}\r\n          \r\n        </p>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Liquidity;\r\n","export default __webpack_public_path__ + \"static/media/logo.e60d6fb0.svg\";","import React from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport logo from \"../assets/img/logo.svg\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    maxWidth: 700,\r\n    margin: \"auto\",\r\n    marginTop: \"200px\",\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1),\r\n    padding: theme.spacing(0.4),\r\n  },\r\n  footer: {\r\n    marginTop: \"155px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction ConnectWalletPage() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <div className=\"Title\">\r\n        <h1 className=\"navbar-logo\">\r\n          <img src={logo} className=\"logo\"></img> \r\n        </h1>\r\n      </div>\r\n\r\n      <Container>\r\n        <Paper className={classes.paperContainer}>\r\n          <Typography\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n            color=\"common.white\"\r\n          >\r\n            Please connect an Ethereum wallet to your browser to use the\r\n            application\r\n          </Typography>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <p>\r\n          DataCurrency | Software Engineer: Fernando Lopes{\" \"}\r\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\r\n        </p>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConnectWalletPage;\r\n","import React from \"react\";\r\n//import {useEffect } from \"react\"\r\nimport \"./App.css\";\r\n//import { ethers } from \"ethers\";\r\nimport NarBar from \"./NavBar/NavBar\";\r\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { SnackbarProvider } from \"notistack\";\r\nimport Liquidity from \"./Liquidity/Liquidity\";\r\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport { Connect } from './helpers';\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#ff0000\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n    secondary: {\r\n      main: \"#9e9e9e\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n  },\r\n});\r\n\r\n\r\n\r\nfunction App() {\r\n  \r\n  try {\r\n    \r\n    <Connect/>\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <SnackbarProvider maxSnack={3}>\r\n          <ThemeProvider theme={theme}>\r\n            <NarBar />\r\n            <Route\r\n              exact\r\n              path=\"/crdt-swap/\"\r\n              component={CoinSwapper}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/crdt-liquidity/\"\r\n              component={Liquidity}\r\n            />\r\n          </ThemeProvider>\r\n        </SnackbarProvider>\r\n      </div>\r\n    );\r\n  } catch (err) {\r\n    return (\r\n      <div className=\"App\">\r\n        <SnackbarProvider maxSnack={3}>\r\n          <ThemeProvider theme={theme}>\r\n            <ConnectWalletPage />\r\n          </ThemeProvider>\r\n        </SnackbarProvider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}